!Case Parameters
#define MIXHEIGHT 13.


!-----------------------------------------------------------------------
!
!     user subroutines required by nek5000
!
!     Parameters used by this set of subroutines:
!
!-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! UDIFF, UTRANS
      include 'TOTAL'

      integer ix,iy,iz,ieg,e
      real scalars_(3)   !size=temperature+scalars

      e = gllel(ieg)
      scalars_(1)=t(ix,iy,iz,e,1)

      !!SR: Transport properties (species and mixture)
      if (ifield.eq.1) then      !VELOCITY+PRESS
         utrans  = param(1)      !density
         udiff   = param(2)      !viscosity

      else if (ifield.eq.2) then   !TEMPERATURE
         utrans  = param(7)        !rho*Cp
         udiff   = param(8)        !conductivity
      endif


      return
      end
!-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'PARALLEL'

      integer ix,iy,iz,ieg

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
!-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! QVOL

      QVOL   = 0.0

      return
      end
!-----------------------------------------------------------------------
      subroutine userchk
      !implicit none
      include 'SIZE'            !
      include 'TSTEP'           ! ISTEP, lastep, time
      include 'INPUT'           ! IF3D, PARAM
      !!SR
      include 'MASS'            !BM1
      include 'GEOM'                    ! xm1, ym1, zm1
      include 'SOLN'


      
!     start framework
      if (ISTEP.eq.0) call frame_start

!     monitor simulation
      call frame_monitor

!     save/load files for full-restart
      call chkpt_main

!     for statistics
!!      call stat_avg

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif

      !!
      !write out bm1 - mass matrix
      if (ISTEP.eq.0) then
          call outpost(bm1,ym1,zm1,bm1,t,'MAS')
      endif

     
      return
      end
!-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, X, Y
c     include 'PARALLEL'  ! GLLEL
      include 'TOTAL'
c      include 'TSTEP'  !SR: for ifield
      common /myblas/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      common /myinflow/ inlet_type,Uein
      integer ix,iy,iz,ieg,e

      e = gllel(ieg)
      pa = 0.0

      if (cbu.eq.'o  ') then       !Dong outflow BC
!!         U0 = 0.5*1.1                  ! characteristic velocity
         if (y.lt.(MIXHEIGHT/2)) then
            U0 = 0.1
         else
            U0= 1.0
         endif  !y

         delta = 0.1               ! small positive constant
         pa = dongOutflow(ix,iy,iz,e,iside,U0,delta)

      elseif (cbu.eq.'v  ') then   !'v  '

         !!mixing layer
         if (y.lt.(MIXHEIGHT/2)) then
            ux= 0.1
            if (ifield.gt.1) then
               if (ifield.eq.2) temp=0.0    !temperature
            endif
         else
            ux= 1.0
            if (ifield.gt.1) then
               if (ifield.eq.2) temp=1      !temperature
            endif
         endif  !y

        !!jet
!        if (y.lt.(0.45*MIXHEIGHT) .or. y.gt.(0.55*MIXHEIGHT)) then
!           ux= 0.5
!           if (ifield.gt.1) then
!              if (ifield.eq.2) temp=0.5    !temperature
!           endif
!        else
!           ux= 1.0
!           if (ifield.gt.1) then
!              if (ifield.eq.2) temp=1.0    !temperature
!           endif
!        endif

         uy= 0.0
         uz= 0.0

      endif  !cbu


      return
      end
!-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! UX, UY, UZ, TEMP, Z

      include 'TOTAL'
      common /myblas/ ub(lx1,ly1,lz1,lelt),vb(lx1,ly1,lz1,lelt)
      common /myinflow/ inlet_type,Uein

!     argument list
      integer ix,iy,iz,ieg

      !!mixing layer
      if (y.lt.(MIXHEIGHT/2)) then
         ux= 0.1
         if (ifield.gt.1) then
            if (ifield.eq.2) temp=0.0    !temperature
         endif
      else
         ux= 1.0
         if (ifield.gt.1) then
            if (ifield.eq.2) temp=1.0    !temperature
         endif
      endif

      !!jet
!      if (y.lt.(0.45*MIXHEIGHT) .or. y.gt.(0.55*MIXHEIGHT)) then
!           ux= 0.5
!           if (ifield.gt.1) then
!              if (ifield.eq.2) temp=0.5    !temperature
!           endif
!        else
!           ux= 1.0
!           if (ifield.gt.1) then
!              if (ifield.eq.2) temp=1.0    !temperature
!           endif
!        endif


      uy= 0.0
      uz= 0.0
 
      

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'


      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat2
      !implicit none
      include 'SIZE'
      include 'TOTAL'

      !set all non-periodic BCs here. This is required due to generating mesh by gmsh and converting it by gmsh2nek
      !Here are the IDs according to ellipse.msh:
      ! 1 "inlet"
      ! 2 "outlet"
      ! 3 "wall"
      ! 4 "freestreamUp"
      ! 5 "freestreamLo"
      do iel=1,nelv
         do ifc=1,2*ndim
            id_face = bc(5,ifc,iel,1)
            if (id_face.eq.1) then        ! inlet
               cbc(ifc,iel,1) = 'v  '
            elseif (id_face.eq.2) then    ! outlet
               cbc(ifc,iel,1) = 'o  '     ! use either 'O  ' with sponge or 'o  ' with Dong BC
            elseif (id_face.eq.3) then    ! wall
               cbc(ifc,iel,1) = 'W  '
            elseif (id_face.eq.4 .OR. id_face.eq.5) then    ! surface 4/5 for free-stream
               cbc(ifc,iel,1) = 'ON '
            endif
         enddo
      enddo


      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'

      
      return
      end

C-----------------------------------------------------------------------
      function dongOutflow(ix,iy,iz,iel,iside,u0,delta)

      include 'SIZE'
      include 'SOLN'
      include 'GEOM'

      real sn(3)

      ux = vx(ix,iy,iz,iel)
      uy = vy(ix,iy,iz,iel)
      uz = vz(ix,iy,iz,iel)

      call getSnormal(sn,ix,iy,iz,iside,iel)
      vn = ux*sn(1) + uy*sn(2) + uz*sn(3)
      S0 = 0.5*(1.0 - tanh(vn/u0/delta))

      dongOutflow = -0.5*(ux*ux+uy*uy+uz*uz)*S0

      return
      end
c-----------------------------------------------------------------------
!
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call chkpt_register
      call stat_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
      include 'SOLN'
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      call stat_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     finalise modules
      call stat_end()

      return
      end subroutine
!======================================================================
!> @brief Provide element coordinates and local numbers (user interface)
!! @param[out]  idir              mapping (uniform) direction
!! @param[out]  ctrs              2D element centres
!! @param[out]  cell              local element numberring
!! @param[in]   lctrs1,lctrs2     array sizes
!! @param[out]  nelsort           number of local 3D elements to sort
!! @param[out]  map_xm1, map_ym1  2D coordinates of mapped elements
!! @param[out]  ierr              error flag
      subroutine user_map2d_get(idir,ctrs,cell,lctrs1,lctrs2,nelsort,
     $     map_xm1,map_ym1,ierr)
      implicit none

      include 'SIZE'
      include 'INPUT'           ! [XYZ]C
      include 'GEOM'            ! [XYZ]M1

!     argument list
      integer idir
      integer lctrs1,lctrs2
      real ctrs(lctrs1,lctrs2)  ! 2D element centres  and diagonals 
      integer cell(lctrs2)      ! local element numberring
      integer nelsort           ! number of local 3D elements to sort
      real map_xm1(lx1,lz1,lelt), map_ym1(lx1,lz1,lelt)
      integer ierr              ! error flag

!     local variables
      integer ntot              ! tmp array size for copying
      integer el ,il ,jl        ! loop indexes
      integer nvert             ! vertex number
      real rnvert               ! 1/nvert
      real xmid,ymid            ! 2D element centre
      real xmin,xmax,ymin,ymax  ! to get approximate element diagonal
      integer ifc               ! face number

!     dummy arrays
      real xcoord(8,LELT), ycoord(8,LELT) ! tmp vertex coordinates

!!SR:  EMPTY: since no averaging over space
!! see: https://kth-nek5000.github.io/KTH_Framework/group__stat.htm


      return
      end subroutine
!=======================================================================
!> @brief Provide velocity, deriv. and vort. in required coordinates and normalise pressure
!! @param[out]   lvel             velocity
!! @param[out]   dudx,dvdx,dwdx   velocity derivatives
!! @param[out]   vort             vorticity
!! @param[inout] pres             pressure
      subroutine user_stat_trnsv(lvel,dudx,dvdx,dwdx,vort,pres)
      implicit none

      include 'SIZE'
      include 'SOLN'
      include 'INPUT'               ! if3d
      include 'GEOM'

      ! argument list
      real lvel(LX1,LY1,LZ1,LELT,3) ! velocity array
      real dudx(LX1,LY1,LZ1,LELT,3) ! velocity derivatives; U
      real dvdx(LX1,LY1,LZ1,LELT,3) ! V
      real dwdx(LX1,LY1,LZ1,LELT,3) ! W
      real vort(LX1,LY1,LZ1,LELT,3) ! vorticity
      real pres(LX1,LY1,LZ1,LELT)   ! pressure

      ! local variables
      integer itmp              ! dummy variable
      integer il, jl            ! loop index
      integer ifll              ! field number for object definition
      real vrtmp(lx1*lz1)       ! work array for face
      real vrtmp2(2)            ! work array
      
      ! functions
      real vlsum
!-----------------------------------------------------------------------
      ! Velocity transformation; simple copy
      itmp = NX1*NY1*NZ1*NELV
      call copy(lvel(1,1,1,1,1),VX,itmp)
      call copy(lvel(1,1,1,1,2),VY,itmp)
      call copy(lvel(1,1,1,1,3),VZ,itmp)

      ! Derivative transformation
      ! No transformation
      call gradm1(dudx(1,1,1,1,1),dudx(1,1,1,1,2),dudx(1,1,1,1,3),
     $      lvel(1,1,1,1,1))
      call gradm1(dvdx(1,1,1,1,1),dvdx(1,1,1,1,2),dvdx(1,1,1,1,3),
     $      lvel(1,1,1,1,2))
      call gradm1(dwdx(1,1,1,1,1),dwdx(1,1,1,1,2),dwdx(1,1,1,1,3),
     $      lvel(1,1,1,1,3))

      ! get vorticity
      if (IF3D) then
         ! curlx
         call sub3(vort(1,1,1,1,1),dwdx(1,1,1,1,2),
     $        dvdx(1,1,1,1,3),itmp)
         ! curly
         call sub3(vort(1,1,1,1,2),dudx(1,1,1,1,3),
     $        dwdx(1,1,1,1,1),itmp)
      endif
      ! curlz
      call sub3(vort(1,1,1,1,3),dvdx(1,1,1,1,1),dudx(1,1,1,1,2),itmp)
      
      ! normalise pressure
      ! in this example I integrate pressure over top faces marked "W"
      ifll = 1     ! I'm interested in velocity bc
      ! relying on mesh structure given by genbox set face number
      jl = 3
      call rzero(vrtmp2,2)  ! zero work array
      itmp = LX1*LZ1
      do il=1,nelv   ! element loop
         if (cbc(jl,il,ifll).eq.'W  ') then
            vrtmp2(1) = vrtmp2(1) + vlsum(area(1,1,jl,il),itmp)
            call ftovec(vrtmp,pres,il,jl,lx1,ly1,lz1)
            call col2(vrtmp,area(1,1,jl,il),itmp)
            vrtmp2(2) = vrtmp2(2) + vlsum(vrtmp,itmp)
         endif
      enddo
      ! global communication
      call gop(vrtmp2,vrtmp,'+  ',2)
      ! missing error check vrtmp2(1) == 0
      vrtmp2(2) = -vrtmp2(2)/vrtmp2(1)
      ! remove mean pressure
      itmp = LX1*LY1*LZ1*NELV
      call cadd(pres,vrtmp2(2),itmp)

      return
      end subroutine
!======================================================================
